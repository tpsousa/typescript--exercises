"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandRunner = void 0;
const child_process_1 = require("child_process");
const ts_tiny_log_1 = require("ts-tiny-log");
const levels_1 = require("ts-tiny-log/levels");
const path_1 = require("path");
/**
 * Command Runner
 */
class CommandRunner {
    /**
     * Create a new command runner
     *
     * @param options (Optional) Command runner options
     */
    constructor(options = {}) {
        /**
         * Current working directory
         */
        this.dir = process.cwd();
        /**
         * Verbose logging?
         */
        this.verbose = false;
        /**
         * Raw options
         */
        this.rawOptions = {};
        if (options.dir) {
            this.dir = options.dir;
        }
        if (options.log) {
            this.setLog(options.log);
        }
        else if (options.verbose) {
            this.verbose = true;
            this.setLog();
        }
    }
    /**
     * Setup the log
     *
     * @param log Log instance
     */
    setLog(log) {
        this.log =
            log !== null && log !== void 0 ? log : new ts_tiny_log_1.Log({
                level: this.verbose ? levels_1.LogLevel.debug : levels_1.LogLevel.info,
            });
    }
    /**
     * Run a command synchronously
     *
     * @param cmd Runnable command/function
     * @param options (Optional) Run options
     */
    run(cmd, options = {}) {
        var _a, _b;
        if (!this.log) {
            this.setLog();
        }
        if (options.loadingDescription) {
            this.log.info(options.loadingDescription + '...');
        }
        const execOptions = Object.assign(Object.assign({ encoding: 'utf8', stdio: 'pipe', cwd: options.dir ? (0, path_1.join)(this.dir, options.dir) : this.dir }, this.rawOptions), (options.rawOptions || {}));
        try {
            let results;
            if (typeof cmd === 'string') {
                results = (0, child_process_1.execSync)(cmd, execOptions);
            }
            else {
                results = cmd();
            }
            if ((this.verbose || options.verbose) &&
                results !== undefined &&
                results !== null) {
                console.log(results);
            }
            if (options.finishedDescription) {
                this.log.info(options.finishedDescription);
            }
        }
        catch (e) {
            const description = 'Error ' + options.loadingDescription;
            this.log.error(description);
            const stdout = (_a = e === null || e === void 0 ? void 0 : e.stdout) === null || _a === void 0 ? void 0 : _a.toString();
            if (stdout) {
                this.log.info(stdout);
            }
            const stderr = (_b = e === null || e === void 0 ? void 0 : e.stderr) === null || _b === void 0 ? void 0 : _b.toString();
            if (stderr) {
                this.log.error(stderr);
            }
            throw new Error(description);
        }
    }
    /**
     * Run a command asynchronously
     *
     * @param cmd Runnable command/function
     * @param options (Optional) Run options
     */
    runAsync(cmd, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((a, r) => {
                try {
                    a(this.run(cmd, options));
                }
                catch (e) {
                    r(e);
                }
            });
        });
    }
}
exports.CommandRunner = CommandRunner;
//# sourceMappingURL=command-runner.js.map
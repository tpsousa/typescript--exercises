/// <reference types="node" />
/// <reference types="node" />
import { ExecSyncOptions, ExecSyncOptionsWithBufferEncoding, ExecSyncOptionsWithStringEncoding } from 'child_process';
import { LogContract } from 'ts-tiny-log';
/**
 * Raw options to be passed to execSync
 */
export type RawOptions = ExecSyncOptions | ExecSyncOptionsWithStringEncoding | ExecSyncOptionsWithBufferEncoding;
/**
 * Global options for each CommandRunner instance
 */
export interface CommandRunnerOptions {
    /**
     * Directory to run commands in
     */
    dir?: string;
    /**
     * Log instance
     */
    log?: LogContract;
    /**
     * Raw options for each command
     */
    rawOptions?: RawOptions;
    /**
     * Enable verbose logging
     */
    verbose?: boolean;
}
/**
 * Allowed return values
 */
export type RunnableReturnValue = void | null | string | Buffer;
/**
 * Runnable command or function (synchronous)
 */
export type Runnable = string | (() => RunnableReturnValue);
/**
 * Runnable command or function (asynchronous)
 */
export type RunnableAsync = string | (() => Promise<RunnableReturnValue>);
/**
 * Run options
 */
export interface RunOptions {
    /**
     * Relative directory to run the command (relative to class dir)
     */
    dir?: string;
    /**
     * Loading description
     */
    loadingDescription?: string;
    /**
     * Finished loading description
     */
    finishedDescription?: string;
    /**
     * Raw options for execSync
     */
    rawOptions?: RawOptions;
    /**
     * Enable verbose logging?
     */
    verbose?: boolean;
}
/**
 * Command Runner
 */
export declare class CommandRunner {
    /**
     * Current working directory
     */
    dir: string;
    /**
     * Logger
     */
    log: LogContract;
    /**
     * Verbose logging?
     */
    verbose?: boolean;
    /**
     * Raw options
     */
    rawOptions: RawOptions;
    /**
     * Create a new command runner
     *
     * @param options (Optional) Command runner options
     */
    constructor(options?: CommandRunnerOptions);
    /**
     * Setup the log
     *
     * @param log Log instance
     */
    setLog(log?: LogContract): void;
    /**
     * Run a command synchronously
     *
     * @param cmd Runnable command/function
     * @param options (Optional) Run options
     */
    run(cmd: Runnable, options?: RunOptions): void;
    /**
     * Run a command asynchronously
     *
     * @param cmd Runnable command/function
     * @param options (Optional) Run options
     */
    runAsync(cmd: Runnable, options: RunOptions): Promise<void>;
}
